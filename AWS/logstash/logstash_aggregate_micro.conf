input {
  stdin {
    type => "stdin-type"
  }
file {
    type => "syslog-ng-3"

    # Wildcards work, here :)
    path => [ "/config-dir/logs/*.log"]
    start_position => "beginning"
  }
}
filter {

        grok {
                #Importacion de los patrones REGEX.
                patterns_dir =>"/config-dir/Patterns"

                #Linea de [FIN] con estado OK 
                match =>["message", "%{TIMESTAMP:timestamp} %{TIME_ZONE:time_zone} \[%{GENERIC_USER:Id_Usuario}\] \[%{GENERIC_WORD:Id_Terminal}\] \[%{GENERIC_WORD:Id_Peticion}\] \[%{MODE:Modo}\] \[%{EVENT_LINE:Tipo_evento}\] \[%{STATUS:Resultado}\] \[Servicio\: %{GENERIC_WORD:Servicio}\] \[Metodo\: %{GENERIC_WORD:Metodo}\] \[Tiempo_peticion\: %{GENERIC_NUMBER:Tiempo_peticion:float} ms\]"]
 
                #Linea de [INICIO] generica
                match =>["message", "%{TIMESTAMP:timestamp} %{TIME_ZONE:time_zone} \[%{GENERIC_USER:Id_Usuario}\] \[%{GENERIC_WORD:Id_Terminal}\] \[%{GENERIC_WORD:Id_Peticion}\] \[%{MODE:Modo}\] \[%{EVENT_LINE:Tipo_evento}\] \[Servicio\: %{GENERIC_WORD:Servicio}\] \[Metodo:\ %{GENERIC_WORD:Metodo}\]"]

 
        }

        ruby {
                code => "
                        # yyyy-MM-dd HH:mm:ss
                        event['parseTime'] = Time.parse(event['timestamp']).to_i

                "
        }
        if([Tipo_evento] =~"(INICIO)") {
                aggregate{
                        task_id => "%{Id_Peticion}"
                        code => "map['TIMESTAMP_ENVIADA'] = event['timestamp'] ;map['parseTime'] ||=0; map['parseTime'] += event['parseTime']"
                        map_action => "create"
                }
                
                drop {}

        }
        else if([Tipo_evento] =~"(FIN)") {

                aggregate{
                        task_id => "%{Id_Peticion}"
                        code => "
                        event['Inicio_peticion'] = map['TIMESTAMP_ENVIADA'];

                        map['parseTime3'] ||=0;
                        map['parseTime3']+=event['parseTime'];
                        map['parseTime3']-=map['parseTime'];

                        event['Tiempo_peticion_real']=map['parseTime3'];
                        "
                        end_of_task => true
                }
                ruby {
                  code => "
                      event.remove('parseTime')
                "
                }
                grok {
                add_field => { "Fin_peticion" =>  "%{timestamp}"}
                remove_field => [ "timestamp" ]
                }

        }

}
output {
elasticsearch { hosts => ["search-elkservicearchitecture-jz4sluz2voumevqhnh4gdntkgm.us-east-1.es.amazonaws.com:80"] }
}